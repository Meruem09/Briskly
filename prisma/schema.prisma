// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id         Int             @id @default(autoincrement())
  clerkId    String          @unique
  name       String
  email      String          @unique
  preference UserPreference?
  chats      Chat[]
  quizes     Quize[]
  notes      Note[]
}

enum Gender {
  male
  female
  others
}

enum EducationStatus {
  school
  college
}

enum ExplanationStyle {
  simple
  detailed
  fast_paced
}

enum ComfortLanguage {
  english
  hindi
  gujrati
  bengali
  others
}

model UserPreference {
  id          Int    @id @default(autoincrement())
  user        User   @relation(fields: [userClerkId], references: [clerkId])
  userClerkId String @unique

  name             String            @default("user")
  gender           Gender?
  educationStatus  EducationStatus?
  explanationStyle ExplanationStyle?
  comfortLanguage  ComfortLanguage?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Chat {
  id        Int       @id @default(autoincrement())
  user      User      @relation(fields: [userId], references: [id])
  userId    Int
  startedAt DateTime  @default(now())
  messages  Message[]
}

enum SenderType {
  user
  ai
}

model Message {
  id      Int        @id @default(autoincrement())
  chat    Chat       @relation(fields: [chatId], references: [id])
  chatId  Int
  sender  SenderType
  content String
  sentAt  DateTime   @default(now())
}

model Quize {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  startedAt DateTime @default(now())
}

model Note {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  content String?
  startedAt DateTime @default(now())
}
